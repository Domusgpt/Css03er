/* Base Variables & Palette (default values, will be tweened per section) */
:root {
  --background-color: #00081d;
  --primary: #00fff7;       /* Electric Cyan */
  --secondary: #ff00ff;     /* Neon Magenta */
  --accent: #2D1B69;        /* Deep Purple */
}

/* RESET & Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
html, body {
  width: 100%;
  height: 100%;
  overflow: hidden; /* Hide native scroll */
  scroll-behavior: smooth;
  font-family: 'Montserrat', sans-serif;
  background: var(--background-color);
  color: var(--primary);
}

/* Scroll Container (for mapping scroll progress to camera movement) */
#scroll-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  z-index: 500; /* On top of canvas but below overlay content */
}
#scroll-content {
  height: 700vh; /* 7 sections Ã— 100vh = total travel distance */
}

/* Three.js Canvas */
#background-canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  transition: filter 0.5s ease;
}
#background-canvas.inverted {
  filter: invert(1);
}

/* Global Portal Overlay */
.portal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: radial-gradient(circle, rgba(0,255,247,0.3) 0%, rgba(0,0,0,0.9) 100%);
  mix-blend-mode: screen;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.5s ease;
  z-index: 300;
}

/* Main Logo */
#main-logo {
  position: fixed;
  top: 5%;
  left: 50%;
  transform: translateX(-50%);
  font-size: 2.8rem;
  color: var(--primary);
  text-shadow: 0 0 15px var(--secondary);
  z-index: 400;
  cursor: pointer;
}

/* Sections Overlay: fixed container for section content */
#sections-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 600;
}

/* Each Section (absolute positioned; we use data attributes for 3D position) */
#sections-overlay section {
  position: absolute;
  width: 100%;
  height: 100%;
  /* The z position is not used by CSS but read by JS to determine when to show content */
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.8s ease, transform 0.8s ease;
}

/* Video Window */
.video-window {
  margin: 1rem auto;
  max-width: 640px;
  width: 100%;
  position: relative;
}
.video-window iframe {
  width: 100%;
  height: 360px;
  border: 3px solid var(--primary);
  box-shadow: 0 0 20px var(--secondary);
}

/* Video Thanks Overlay */
#video-thanks {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.85);
  color: var(--primary);
  padding: 1rem 2rem;
  font-size: 2rem;
  opacity: 0;
  transition: opacity 0.5s ease;
  z-index: 700;
}

/* Call-to-Action Button */
a.cta {
  display: inline-block;
  margin-top: 1.5rem;
  padding: 0.75rem 1.5rem;
  background: var(--primary);
  color: var(--background-color);
  text-decoration: none;
  font-size: 1.5rem;
  border-radius: 5px;
  transition: background 0.3s ease;
}
a.cta:hover {
  background: var(--secondary);
}

/* Neon Flare Effect */
.neon-flare {
  position: absolute;
  border-radius: 50%;
  background: radial-gradient(circle, var(--primary) 0%, transparent 70%);
  width: 200px;
  height: 200px;
  pointer-events: none;
  animation: flareAnim 1s ease-out forwards;
  z-index: 800;
}
@keyframes flareAnim {
  0% { transform: scale(0.2); opacity: 1; }
  100% { transform: scale(1.5); opacity: 0; }
}

/* Text Glitch Effects */
h1.glitch {
  position: relative;
}
h1.glitch::before,
h1.glitch::after {
  content: attr(data-text);
  position: absolute;
  left: 0;
  top: 0;
  opacity: 0.8;
  clip: rect(0, 900px, 0, 0);
}
h1.glitch:hover::before {
  animation: glitch1 1s infinite;
}
h1.glitch:hover::after {
  animation: glitch2 1s infinite;
}
@keyframes glitch1 {
  0% { clip: rect(42px, 9999px, 44px, 0); transform: translate(2px, -2px); }
  50% { clip: rect(12px, 9999px, 15px, 0); transform: translate(-2px, 2px); }
  100% { clip: rect(42px, 9999px, 44px, 0); transform: translate(2px, -2px); }
}
@keyframes glitch2 {
  0% { clip: rect(85px, 9999px, 90px, 0); transform: translate(-2px, 2px); }
  50% { clip: rect(25px, 9999px, 30px, 0); transform: translate(2px, -2px); }
  100% { clip: rect(85px, 9999px, 90px, 0); transform: translate(-2px, 2px); }
}

/* Flicker Animation for Headings */
@keyframes flicker {
  0% { opacity: 1; }
  50% { opacity: 0.8; }
  100% { opacity: 1; }
}

/* Glitch Effect on Canvas */
#background-canvas.glitch-effect {
  animation: canvasGlitch 0.1s steps(2) infinite;
}
@keyframes canvasGlitch {
  0% { filter: contrast(100%) hue-rotate(0deg); }
  50% { filter: contrast(150%) hue-rotate(20deg); }
  100% { filter: contrast(100%) hue-rotate(0deg); }
}